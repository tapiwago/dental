# Optimized Dockerfile for Frontend (faster builds)
FROM node:22-alpine as build

# Install dependencies for node-gyp
RUN apk add --no-cache python3 make g++

# Set working directory
WORKDIR /app

# Copy package files first for better caching
COPY package*.json ./

# Set npm configuration for Docker
RUN npm config set unsafe-perm true
RUN npm config set legacy-peer-deps true

# Install dependencies with all error handling
RUN npm install --ignore-engines --ignore-scripts --no-audit --no-fund || \
    npm install --legacy-peer-deps --ignore-engines --ignore-scripts --force

# Copy source code
COPY . .

# Create missing directories if needed
RUN mkdir -p src/utils/node-scripts

# Build the application
RUN npm run build

# Production stage
FROM nginx:alpine

# Copy built files
COPY --from=build /app/dist /usr/share/nginx/html

# Create default nginx config if custom one doesn't exist
RUN echo 'server { \
    listen 80; \
    location / { \
        root /usr/share/nginx/html; \
        index index.html; \
        try_files $uri $uri/ /index.html; \
    } \
}' > /etc/nginx/conf.d/default.conf

# Copy custom nginx config if it exists
COPY nginx.conf /etc/nginx/conf.d/default.conf 2>/dev/null || true

EXPOSE 80
CMD ["nginx", "-g", "daemon off;"]
